@require_http_methods(['GET', 'POST']) #Добавление в список словаря
def index(request):
    if request.method == 'POST':
        article = {
            'title': request.POST['title'],
            'author': request.POST['author']
        }
        articles.append(article)
    return render(request, 'articles.html', context={'articles': articles})

@require_http_methods(['GET'])
def article_view(request, id):
    article = next((a for a in articles if a['id'] == id), None)
    if not article:
        raise Http404()
    return render(request, 'articles/article.html', context={'article': article})


raise Http404()    # '404.html'
or
return render(request, '404.html', status=404 )


class Employee(models.Model):
    TRAINEE = 'TR'
    JUNIOR = 'JR'
    SENIOR = 'SR'
    CEO = 'CEO'
    POSITIONS = [
        (TRAINEE, 'Trainee'),
        (JUNIOR, 'Junior'),
        (SENIOR, 'Senior'),
        (CEO, 'CEO'),
    ]
    name = models.CharField(max_length=255)
    position = models.CharField(max_length=3, choices=POSITIONS, default=TRAINEE)

from .models import Article
@require_http_methods(['GET', 'POST'])
def index(request):
    if request.method == 'POST':
        data = {
            'title': request.POST['title'],
            'author': request.POST['author']
        }
        Article.objects.create(**data).save()
    articles = Article.objects.all()
return render(request, 'articles/index.html', context={'articles': articles})

@require_http_methods(['GET'])
def article_view(request, id):
    article = Article.objects.filter(pk= id).first()
    if not article:
        raise Http404()
   	return render(request, 'articles/article.html', context={'article': article})


from django.views import View
 class IndexView(View):

    def get(self, request, *args, **kwargs):
        categories = Category.objects.all()
        return render(request, 'categories/index.html', context={
            'categories': categories,
        })

from simple_blog.categories import views
path('', views.IndexView.as_view(), name='categories_index'),


from django.shortcuts import render, get_object_or_404
from django.views import View
from hexlet_django_blog.article.models import Article

class ArticleView(View):
    def get(self, request, *args, **kwargs):
        article = get_object_or_404(Article, id=kwargs['id'])

        return render(request, 'show.html', context={
            'article': article,
        })


		#category = get_object_or_404(Category, id=kwargs['id'])
        #art = category.article_set.all()
        #return render(request,'categories/category.html', context={'cat':category, 'art':art})

from django.db.models import Q
Q(question__startswith='What')
Q(question__startswith='Who') | Q(question__startswith='What')
WHERE question LIKE 'Who%' OR question LIKE 'What%'
from django.db.models import Q

class IndexView(View):
    def get(self, request, *args, **kwargs):
        query = request.GET.get('q', '')
        articles = Article.objects.filter(Q(title__icontains=query))
        return render(request, 'articles/index.html', context={'articles': articles, 'query': query})


{% extends 'layout.html' %}
{% load bootstrap4 i18n %}
{% get_current_language as LANGUAGE_CODE %}

{% block content %}
  <div class="container mt-4">
    <h1>Список статей</h1>
    <form class="form-inline mb-3"  action="{% url "articles_index" %}" method="GET">
      <div class="form-group">
      <input class="form-control" type="search" name="q" value="{{query}}" placeholder="Name of article"/>
      </div>
      <button class="btn btn-info" type="submit">Поиск</button>
    </form>




class Category(models.Model):
    STATE_TYPE = (
        ('draft', 'draft'),
        ('published', 'published')
    )
    name = models.CharField(max_length=255)
    description = models.CharField(max_length=255)
    state = models.CharField(choices=STATE_TYPE, max_length=9, default='draft')

    def __str__(self):
        """Represent model object."""
        return self.name


class CategoryForm(forms.ModelForm):
    name = forms.CharField(max_length = 100, required=True)
    description = forms.CharField(max_length=200, required=True)
    class Meta:
        model = Category
        fields = ['name', 'description', 'state']


class CategoriesCreateView(View):
    def get(self, request, *args, **kwargs):
        form = CategoryForm()
        return render(request, 'categories/create.html', context={'form':form})

    def post(self, request, *args, **kwargs):
        form = CategoryForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('categories_index')
        return render(request, 'categories/create.html', context={'form':form})


 {% if form.subject.errors %}  ### check error and form
  <div>
    <ul>
    {% for error in form.subject.errors %}
      <li><strong>{{ error|escape }}</strong></li>
    {% endfor %}
    </ul>
  </div>
  {% endif %}
  <form action="{% url 'categories_create' %}" method="post">
    {% csrf_token %}
    <table border="1">
      {{ form }}
    </table>
    <input type="submit" value="Создать">
  </form>

# python manage.py check --deploy
# python manage.py runserver
# python manage.py startapp 'name app'
# python manage.py createsuperuser 'name user '
# django-admin # list commands
# django-admin startproject 'name site'
# python manage.py sqlmigrate women 0001  // позволяет посмотреть sql запрос который будет выполнен
# python manage.py makemigrations
# python manage.py migrate

# from women.models import Women
# >>> Women(title='Анджелина Джоли', content='Биография Анджелины Джоли')
# <Women: Women object (None)>
# >>> w1 = _    \\ '_' - хранит ссылку на последнее действие
# >>> w1
# <Women: Women object (None)>
# w1.save() # save to db


# создать приложение --> зарегистраровать в сетинг app --> reg in url